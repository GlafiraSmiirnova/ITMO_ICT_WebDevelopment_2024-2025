{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WEB documentation","text":"<p>This is a documentation of laboratory works by Glafira Smirnova, K3342.</p>"},{"location":"lab_1/task_1/","title":"task 1","text":""},{"location":"lab_1/task_1/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"lab_1/task_1/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\n\ndef udp_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    server_address = ('localhost', 12123)\n    server_socket.bind(server_address)\n\n    print(\"Server is running...\")\n\n    while True:\n        data, client_address = server_socket.recvfrom(1024)\n        print(f\"Received a message: {data.decode('utf-8')}\")\n\n        server_socket.sendto(b\"Hello, client\", client_address)\n\n\nif __name__ == \"__main__\":\n    udp_server()\n</code></pre>"},{"location":"lab_1/task_1/#clientpy","title":"<code>client.py</code>","text":"<pre><code>import socket\n\ndef udp_client():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    server_address = ('localhost', 12123)\n    print(\"Press Enter to start!\")\n\n    try:\n        while True:\n            s = input()\n            if s == \"exit\":\n                break\n\n            message = b\"Hello, server\"\n\n            print(f\"Sending message: {message.decode('utf-8')}\")\n\n            client_socket.sendto(message, server_address)\n\n            response, _ = client_socket.recvfrom(1024)\n            print(f\"Server's response: {response.decode('utf-8')}\")\n    finally:\n        client_socket.close()\n\n\nif __name__ == \"__main__\":\n    udp_client()\n</code></pre> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 UDP \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u0432\u043e\u0434\u043e\u043c Enter \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 exit \u0441\u043e\u043a\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f.</p>"},{"location":"lab_1/task_2/","title":"task 2","text":""},{"location":"lab_1/task_2/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430), \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.</p>"},{"location":"lab_1/task_2/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\nimport math\n\n\ndef handle_client(client_socket):\n    try:\n        data = client_socket.recv(1024).decode()\n        a, b = map(float, data.split())\n\n        if a &lt;= 0 or b &lt;= 0:\n            raise Exception\n        c = math.sqrt(a ** 2 + b ** 2)\n\n        client_socket.sendall(f\"\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430: {c:.2f}\".encode())\n    except Exception as e:\n        client_socket.sendall(f\"\u041e\u0448\u0438\u0431\u043a\u0430: {str(e)}\".encode())\n    finally:\n        client_socket.close()\n\n\ndef start_server(host='127.0.0.1', port=65432):\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind((host, port))\n    server.listen(1)\n    print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\")\n\n    while True:\n        client_socket, addr = server.accept()\n        print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442: {addr}\")\n        handle_client(client_socket)\n\n\nif __name__ == \"__main__\":\n    start_server()\n</code></pre>"},{"location":"lab_1/task_2/#clientpy","title":"<code>client.py</code>","text":"<pre><code>import socket\n\n\ndef start_client(host='127.0.0.1', port=65432):\n    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        client.connect((host, port))\n\n        a = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")\n        b = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")\n\n        client.sendall(f\"{a} {b}\".encode())\n\n        result = client.recv(1024).decode()\n        print(f\"\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {result}\")\n\n    finally:\n        client.close()\n\n\nif __name__ == \"__main__\":\n    start_client()\n</code></pre> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 TCP \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043a\u0430\u0442\u0435\u0442\u0430\u043c\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p>"},{"location":"lab_1/task_3/","title":"task 3","text":""},{"location":"lab_1/task_3/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p>"},{"location":"lab_1/task_3/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\n\n\ndef load_html():\n    try:\n        with open('index.html', 'r', encoding=\"utf-8\") as file:\n            return file.read()\n    except FileNotFoundError:\n        return \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\n\n\ndef handle_client(client_socket):\n    try:\n        html_content = load_html()\n\n        response = f\"HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n{html_content}\"\n\n        client_socket.sendall(response.encode())\n\n    finally:\n        client_socket.close()\n\n\ndef start_server(host='127.0.0.1', port=8080):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen()\n    print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\")\n\n    try:\n        while True:\n            client_socket, client_address = server_socket.accept()\n            handle_client(client_socket)\n    finally:\n        server_socket.close()\n\n\nif __name__ == \"__main__\":\n    start_server()\n\n</code></pre> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 TCP \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f response, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u0442\u0435\u043b\u0430 \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0432 \u0432\u0438\u0434\u0443 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p> <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0445\u043e\u0441\u0442: http://127.0.0.1:8080/</p>"},{"location":"lab_1/task_4/","title":"task 4","text":""},{"location":"lab_1/task_4/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c TCP, socket, threading.</p>"},{"location":"lab_1/task_4/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\nimport threading\n\nclients = []\n\n\ndef broadcast(message, client_socket):\n    for client in clients:\n        if client['socket'] != client_socket:\n            try:\n                client['socket'].send(message)\n            except:\n                clients.remove(client)\n\n\ndef handle_client(client_socket):\n    try:\n        name = client_socket.recv(1024).decode('utf-8')\n        clients.append({\"socket\": client_socket, \"name\": name})\n\n        welcome_message = f\"{name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443!\".encode('utf-8')\n        broadcast(welcome_message, client_socket)\n        print(welcome_message.decode('utf-8'))\n\n        while True:\n            message = client_socket.recv(1024)\n            dec_message = message.decode('utf-8')\n            if dec_message != \"leave\":\n                formatted_message = f\"{name}: {dec_message}\".encode('utf-8')\n                print(formatted_message.decode('utf-8'))\n                broadcast(formatted_message, client_socket)\n            else:\n                break\n    finally:\n        print(f\"{name} \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f.\")\n        clients.remove({\"socket\": client_socket, \"name\": name})\n        broadcast(f\"{name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\".encode('utf-8'), client_socket)\n        client_socket.close()\n\n\ndef start_server(host='127.0.0.1', port=5555):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen()\n    print(f\"[\u0421\u0415\u0420\u0412\u0415\u0420 \u0417\u0410\u041f\u0423\u0429\u0415\u041d] \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 {host}:{port}\")\n\n    while True:\n        client_socket, client_address = server_socket.accept()\n        print(f\"[\u041d\u041e\u0412\u041e\u0415 \u041f\u041e\u0414\u041a\u041b\u042e\u0427\u0415\u041d\u0418\u0415] {client_address} \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f.\")\n\n        thread = threading.Thread(target=handle_client, args=(client_socket,))\n        thread.start()\n\n\nif __name__ == \"__main__\":\n    start_server()\n</code></pre>"},{"location":"lab_1/task_4/#clientpy","title":"<code>client.py</code>","text":"<pre><code>import socket\nimport threading\n\n\ndef receive_messages(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            if message:\n                print(message)\n        except:\n            print(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\")\n            client_socket.close()\n            break\n\n\ndef send_messages(client_socket):\n    while True:\n        message = input(\"\")\n        try:\n            client_socket.send(message.encode('utf-8'))\n        except:\n            print(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\")\n            client_socket.close()\n            break\n\n\ndef start_client(host='127.0.0.1', port=5555):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n\n    name = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \")\n    client_socket.send(name.encode('utf-8'))\n\n    receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))\n    receive_thread.start()\n\n    send_thread = threading.Thread(target=send_messages, args=(client_socket,))\n    send_thread.start()\n\n\nif __name__ == \"__main__\":\n    start_client()\n</code></pre> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442 \u0441 TCP-\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0435 \u0438\u043c\u044f. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a \u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043b\u043e\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \"leave\" \u0441\u043e\u043a\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f.</p>"},{"location":"lab_1/task_5/","title":"task 5","text":""},{"location":"lab_1/task_5/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: 1. \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. 2. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p>"},{"location":"lab_1/task_5/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\n\n\nclass MyHTTPServer:\n    def __init__(self, host='127.0.0.1', port=8090):\n        self.host = host\n        self.port = port\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind((self.host, self.port))\n        self.server_socket.listen(5)\n        print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {self.host}:{self.port}\")\n\n        self.grades = {}\n\n    def serve_forever(self):\n        try:\n            while True:\n                client_socket, client_address = self.server_socket.accept()\n                self.serve_client(client_socket)\n        except KeyboardInterrupt:\n            print(\"\\n\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\")\n        finally:\n            self.server_socket.close()\n\n    def serve_client(self, client_socket):\n        try:\n            while True:\n                request = client_socket.recv(1024).decode('utf-8')\n                if not request:\n                    return\n\n                method, url, headers, body = self.parse_request(request)\n\n                if method == \"GET\":\n                    self.handle_get(client_socket)\n                elif method == \"POST\":\n                    self.handle_post(client_socket, body)\n                else:\n                    self.send_response(client_socket, \"405 Method Not Allowed\", \"\u041c\u0435\u0442\u043e\u0434 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f.\")\n        finally:\n            client_socket.close()\n\n    def parse_request(self, request):\n        lines = request.split(\"\\r\\n\")\n        method, url, protocol = lines[0].split(\" \")\n\n        headers = {}\n        body = ''\n        i = 1\n        # \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\n        while lines[i]:\n            if \": \" in lines[i]:\n                key, value = lines[i].split(\": \", 1)\n                headers[key] = value\n            i += 1\n        if i &lt; len(lines) - 1:\n            body = lines[i + 1]\n\n        print(body)\n        return method, url, headers, body\n\n    def handle_get(self, client_socket):\n        response_body = \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/h1&gt;&lt;ul&gt;\"\n        for discipline in self.grades.keys():\n            response_body += f\"&lt;li&gt;{discipline}:\"\n            for grade in self.grades[discipline]:\n                response_body += f\" {grade},\"\n            response_body = response_body[:len(response_body)-1]\n            response_body += \"&lt;/li&gt;\"\n\n        response_body += \"&lt;/ul&gt;\"\n\n        response_body += \"\"\"\n                &lt;h2&gt;\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443&lt;/h2&gt;\n                &lt;form method=\"POST\" action=\"/\"&gt;\n                    &lt;label for=\"discipline\"&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430:&lt;/label&gt;&lt;br&gt;\n                    &lt;input type=\"text\" id=\"discipline\" name=\"discipline\"&gt;&lt;br&gt;\n                    &lt;label for=\"grade\"&gt;\u041e\u0446\u0435\u043d\u043a\u0430:&lt;/label&gt;&lt;br&gt;\n                    &lt;input type=\"text\" id=\"grade\" name=\"grade\"&gt;&lt;br&gt;&lt;br&gt;\n                    &lt;input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"&gt;\n                &lt;/form&gt;\n                \"\"\"\n\n        response_body += \"&lt;/body&gt;&lt;/html&gt;\"\n\n        self.send_response(client_socket, \"200 OK\", response_body)\n\n    def handle_post(self, client_socket, body):\n        # discipline=&lt;\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435&gt;&amp;grade=&lt;\u043e\u0446\u0435\u043d\u043a\u0430&gt;\n        params = {}\n        for pair in body.split(\"&amp;\"):\n            key, value = pair.split(\"=\")\n            params[key] = value\n\n        discipline = params.get('discipline', '').replace('+', ' ')\n        grade = params.get('grade', '')\n\n        if discipline and grade:\n            if discipline in self.grades:\n                self.grades[discipline].append(grade)\n            else:\n                self.grades[discipline] = [grade]\n            self.handle_get(client_socket)\n        else:\n            self.send_response(client_socket, \"400 Bad Request\", \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441!&lt;/h1&gt;&lt;a \"\n                                                                 \"href='/'&gt;\u041d\u0430\u0437\u0430\u0434&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\")\n\n    def send_response(self, client_socket, status, body):\n        response = f\"HTTP/1.1 {status}\\r\\n\"\n        response += \"Content-Type: text/html; charset=utf-8\\r\\n\"\n        response += f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\"\n        response += \"Connection: close\\r\\n\"\n        response += \"\\r\\n\"\n        response += body\n\n        client_socket.sendall(response.encode('utf-8'))\n\n\nif __name__ == '__main__':\n    server = MyHTTPServer(host='127.0.0.1', port=8090)\n    server.serve_forever()\n\n</code></pre> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 TCP \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 GET \u0438\u043b\u0438 POST. \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0438\u0442\u0441\u044f (\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0442\u0435\u043b\u043e), \u0434\u0430\u043b\u0435\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0445\u044d\u043d\u0434\u043b\u0435\u0440.</p> <p>\u041f\u0440\u0438 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0443\u0441\u043f\u0435\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438. \u041f\u0440\u0438 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f html \u043e\u0442\u0432\u0435\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u0430\u0436\u0434\u0443\u044e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438.</p> <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0445\u043e\u0441\u0442: http://127.0.0.1:8090/</p> <p>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b curl:</p> <p><code>Remove-item alias:curl</code></p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u0430: </p> <p><code>curl -X POST -d \"discipline=math&amp;grade=5\" http://127.0.0.1:8090</code></p>"}]}